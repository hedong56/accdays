<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                    http://www.springframework.org/schema/security 
                    http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<!-- 参照 spring-security-samples-tutorial-xml 示例 -->
	
	
	<global-method-security pre-post-annotations="enabled" />
	<!-- 表示可以使用注解：@PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter 
		例如：
		@PreAuthorize("hasRole('ROLE_USER')")
  		public void create(Contact contact);
  		means that access will only be allowed for users with the role "ROLE_USER".
	-->
	
	
	<!-- 不配置权限的包含“/**”模式的静态文件，必须配在前面 -->
	<!-- 说明对静态资源，超不经过请求的超链接也会连接 -->
	<http pattern="/css/**" security="none" />
    <http pattern="/js/**" security="none" />
    <http pattern="/img/**" security="none" />
    
    
    <http use-expressions="true">
        <intercept-url pattern="/secure/extreme/**" access="hasRole('supervisor')"/>
        <intercept-url pattern="/secure/**" access="isAuthenticated()" />
        <!--
             Allow all other requests. In a real application you should
             adopt a whitelisting approach where access is not allowed by default
          -->
        <intercept-url pattern="/**" access="permitAll" />
        <form-login />
        <logout logout-success-url="/loggedout.jsp" delete-cookies="JSESSIONID"/>
        <remember-me />
		<!--
		    Uncomment to enable X509 client authentication support
		        <x509 />
		-->
        <!-- Uncomment to limit the number of sessions a user can have -->
        <session-management invalid-session-url="/timeout.jsp">
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
        </session-management>

    </http>

    <!--
    Usernames/Passwords are
        rod/koala
        dianne/emu
        scott/wombat
        peter/opal
    -->
    <beans:bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<authentication-manager alias="authenticationManager">
	    <authentication-provider>
	    	<password-encoder ref="encoder"/>
	        <jdbc-user-service data-source-ref="dataSource"
	       		users-by-username-query="SELECT name, password,case enabled WHEN 1 THEN 'true' ELSE 'false' END FROM user WHERE name=?"
	       		authorities-by-username-query="SELECT U.name, RL.role FROM user_role RL, user U WHERE RL.USER_ID=U.id AND U.name=?"
	        />
	    </authentication-provider>
	</authentication-manager>
    
</beans:beans>